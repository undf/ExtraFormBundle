{% extends 'MopaBootstrapBundle:Form:fields.html.twig' %}

{% block widget_attributes %}
    {% import 'UndfFormBundle:Form:angular_fields_macros.html.twig' as ngMacros %}
    {% set ngModel = ngMacros.ng_model(form, name) %}

{% spaceless %}
    id="{{ id }}" name="{{ full_name }}"{% if read_only %} readonly="readonly"{% endif %}{% if disabled %} disabled="disabled"{% endif %}{% if required %} required="required"{% endif %}{% if max_length %} maxlength="{{ max_length }}"{% endif %}{% if pattern %} pattern="{{ pattern }}"{% endif %}
    {% if ('radio' not in form.vars.block_prefixes) and ('checkbox' not in form.vars.block_prefixes) %}
        ng-model="{{ ngModel }}"
        {% if type|default('text') == 'number' %}
            ng-init='{{ ngModel }} = {{ value }}'
        {% else %}
            {% if value is not empty and value is not iterable %}ng-init="{{ ngModel }} = '{{ value|replace({"\'": "\\'"}) }}'"{% endif %}
        {% endif %}
    {% endif %}
    {% for attrname, attrvalue in attr %}{% if attrname in ['placeholder', 'title'] %}{{ attrname }}="{{ attrvalue|trans({}, translation_domain) }}" {% else %}{{ attrname }}="{{ attrvalue }}" {% endif %}{% endfor %}
{% endspaceless %}
{% endblock widget_attributes %}

{% block choice_widget_expanded %}
    {% import 'UndfFormBundle:Form:angular_fields_macros.html.twig' as ngMacros %}
    {% set ngModel = ngMacros.ng_model(form, name) %}

{% spaceless %}
    {% set label_attr = label_attr|merge({'class': (label_attr.class|default(''))}) %}
    {% set label_attr = label_attr|merge({'class': (label_attr.class ~ ' ' ~ (widget_type != '' ? (multiple ? 'checkbox' : 'radio') ~ '-' ~ widget_type : ''))}) %}
    {% if expanded %}
        {% set attr = attr|merge({'class': attr.class|default(horizontal_input_wrapper_class)}) %}
        <div {{ block('widget_attributes') }}>
    {% endif %}
    {% set widgetAttr = {'class': attr.widget_class|default('')}%}
    {% for child in form %}
        {% if widget_type != 'inline' %}
        <div class="{{ multiple ? 'checkbox' : 'radio' }}">
            {% if not multiple %}
                {% set widgetAttr = widgetAttr|merge({'data-ng-click': attribute(attr, 'ng-model' ) ~ '=' ~ child.vars.value})%}
            {% endif %}
        {% endif %}
            <label{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
                {{ form_widget(child, {'horizontal_label_class': horizontal_label_class, 'horizontal_input_wrapper_class': horizontal_input_wrapper_class, 'attr': widgetAttr }) }}
                {{ child.vars.label|trans({}, translation_domain) }}
            </label>
        {% if widget_type != 'inline' %}
        </div>
        {% endif %}
    {% endfor %}
    {% if expanded %}
        </div>
    {% endif %}
{% endspaceless %}
{% endblock choice_widget_expanded %}

{% block label_asterisk %}
    {% if required %}
        <span>*</span>
    {% endif %}
{% endblock label_asterisk %}

{% block form_errors %}
    {% import 'UndfFormBundle:Form:angular_fields_macros.html.twig' as ngMacros %}
    {% set ngModel = ngMacros.ng_model(form, name) %}
    {% set rootName = ngMacros.root_name(form) %}

    {% spaceless %}
        {% if form.children|length == 0 %}
            <span class="help-block"
                  ng-show="{{ rootName ~ '.validated && ' ~ rootName ~ '["' ~ full_name ~ '"].$invalid' }}">
           {{ attr.invalid_message|default('form.required')|trans(attr.invalid_parameters|default({}), 'validators')|raw }}
        </span>
        {% endif %}
        {% if errors|length > 0 %}
            <attr data-ng-init="{{ rootName ~ '.hasErrors=true' }} "></attr>
            {% if error_delay %}
                {% for child in form %}
                    {% if loop.index == 1 %}
                        {% if child.set('errors', errors) %}{% endif %}
                    {% endif %}
                {% endfor %}
            {% else %}
                {% if form.parent == null %}
                    {% from 'MopaBootstrapBundle::flash.html.twig' import flash %}
                    {% for error in errors %}
                        {{ flash('danger', error.messagePluralization is null
                        ? error.messageTemplate|trans(error.messageParameters, 'validators')
                        : error.messageTemplate|transchoice(error.messagePluralization, error.messageParameters, 'validators'),
                        true
                        ) }}
                    {% endfor %}
                {% else %}
                    {% set childForm = form.parent ? rootName ~ '["' ~ full_name ~ '"]' : rootName %}
                    <span class="help-{{ block('error_type') }}" ng-show="{{ childForm ~ '.$pristine' }}">
                    {% set error = errors|first %}
                    {{ error.messagePluralization is null
                    ? error.messageTemplate|trans(error.messageParameters, 'validators')
                    : error.messageTemplate|transchoice(error.messagePluralization, error.messageParameters, 'validators') }}
                    <br>
                </span>
                {% endif %}
            {% endif %}
            </span>
        {% endif %}
    {% endspaceless %}
{% endblock form_errors %}

{% block widget_form_group_start %}
    {% import 'UndfFormBundle:Form:angular_fields_macros.html.twig' as ngMacros %}
    {% set ngModel = ngMacros.ng_model(form, name) %}
    {% set rootName = ngMacros.root_name(form) %}

{% spaceless %}
{% if widget_form_group|default(false) or form.parent == null %}
    {% if prototype is defined %}
        {% set data_prototype = 'collection' in form.vars.block_prefixes and not omit_collection_item ? '<div class="collection-item ' ~ widget_items_attr.class|default()|join(' ') ~ '" id="' ~ prototype.vars.id ~ '_control_group">' ~ form_row(prototype) ~ '</div>' : form_row(prototype) %}
        {% set data_prototype_name = form.vars.form.vars.prototype.vars.name|default('__name__') %}
        {% set widget_form_group_attr = widget_form_group_attr|merge({'data-prototype': data_prototype, 'data-prototype-name': data_prototype_name})|merge(attr) %}
    {% endif %}
    {% if errors|length > 0 %}
        {% set widget_form_group_attr = widget_form_group_attr|merge({'class': widget_form_group_attr.class|default('') ~ ' has-error'}) %}
    {% endif %}

    {% if form.children|length == 0 %}
        {% set isInvalid = rootName ~ '["' ~ full_name ~ '"].$invalid' %}
        {% set isDirty = rootName ~ '["' ~ full_name ~ '"].$dirty' %}
    {% else %}
        {% set isInvalid = '(' %}
        {% set isDirty = '(' %}
        {% for child in form.children %}
            {% set isInvalid = isInvalid ~ rootName ~ '["' ~ full_name ~ '[' ~ child.vars.name ~']"].$invalid' %}
            {% set isDirty = isDirty ~ rootName ~ '["' ~ full_name ~ '[' ~ child.vars.name ~']"].$dirty' %}
            {% if loop.index < (form.children|length) %}
                {% set isInvalid = isInvalid ~ ' || ' %}
                {% set isDirty = isDirty ~ ' || ' %}
            {% endif %}
        {% endfor %}
        {% set isInvalid = isInvalid ~ ')' %}
        {% set isDirty = isDirty ~ ')' %}
    {% endif %}

    {% set widget_form_group_attr = widget_form_group_attr|merge({'class': widget_form_group_attr.class|default('') ~ ' ng-class: {"has-error":' ~ isInvalid ~ ' && (' ~ isDirty ~ ' || ' ~ rootName ~ '.validated)}'}) %}
    {% if 'collection' in form.vars.block_prefixes and attr.class is defined %}
        {% set widget_form_group_attr = widget_form_group_attr|merge({'class': widget_form_group_attr.class|default('') ~ ' ' ~ attr.class}) %}
    {% endif %}
    <div {% for attrname,attrvalue in widget_form_group_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
    {# a form item containing the field in block_prefixes is a near subform or a field directly #}
    {% if (form|length > 0 and form.parent != null)
    and 'field' not in form.vars.block_prefixes %}
        {% if show_child_legend %}
            {{ block('form_legend') }}
        {% elseif label_render %}
            {{ form_label(form, label|default(null)) }}
        {% endif %}
    {% else %}
        {% if label_render %}
            {{ form_label(form, label|default(null)) }}
        {% endif %}
    {% endif %}
{% else %}
    {% if label_render %}
        {{ form_label(form, label|default(null)) }}
    {% endif %}
{% endif %}

{% if horizontal and not label_render %}
    <label class="{{ horizontal_label_class }} control-label"></label>
{% endif %}

{% if horizontal %}
<div class="{{ horizontal_input_wrapper_class }}">
    {% endif %}
    {% endspaceless %}
    {% endblock widget_form_group_start %}

    {% block password_widget %}
        {% spaceless %}
            {% set type = type|default('password') %}
            {{ block('form_widget_simple') }}
        {% endspaceless %}
    {% endblock password_widget %}

    {% block date_widget %}
        {#
        This block add some dirty hacks to the date_widget block from the MopaBootstrapBundle
        because the original block doesnÂ´t work properly with bootstrap 3
        TODO: Check the original project and once there is a stable version for bootstrap 3
        get rid of this block and use the one from 'MopaBootstrapBundle:Form:fields.html.twig'
        #}
        {% spaceless %}
            {% if widget == 'single_text' %}
                {% if datepicker is defined %}
                    <div class="input-{{ widget_addon.type }} date dropdown dropup"
                         style="position:relative" {{ block('widget_container_attributes') }} data-date="{{ value }}"
                         data-date-format="{{ format|lower }}" data-form="datepicker">
                        {% if widget_addon.type == 'prepend' %}
                            {{ block('widget_addon') }}
                        {% endif %}
                        {% set attr = attr|merge({'class': attr.class|default('') ~ ' not-removable grd-white'}) %}
                        <input type="text" {{ block('widget_attributes') }} value="{{ value }}" data-form="datepicker"
                               data-date-format="{{ format|lower }}"/>
                        <button class="btn dropdown-toggle" ng-click="opened=!opened"><i class="icon-calendar"></i>
                        </button>
                        <div class="dropdown-menu" {% if value is not empty %}ng-init="date = '{{ value }}'"{% endif %}>
                            <input type="text" u-datepicker show-weeks="false" {{ block('date_widget_attributes') }}
                                   value="{{ value }}" data-form="datepicker" data-date-format="{{ format|lower }}"/>
                        </div>
                        {% if widget_addon.type == 'append' %}
                            {{ block('widget_addon') }}
                        {% endif %}
                    </div>
                {% else %}
                    {{ block('form_widget_simple') }}
                {% endif %}
            {% else %}
                {% set attr = attr|merge({'class': attr.class|default('inline')}) %}
                {{ date_pattern|replace({
                '{{ year }}':  form_widget(form.year, {'attr': {'class': attr.widget_class|default('') ~ ' input-small' }}),
                '{{ month }}': form_widget(form.month, {'attr': {'class': attr.widget_class|default('') ~ ' input-mini'}}),
                '{{ day }}':   form_widget(form.day, {'attr': {'class': attr.widget_class|default('') ~ ' input-mini'}}),
                })|raw }}
                {{ block('help') }}
            {% endif %}
        {% endspaceless %}
    {% endblock date_widget %}

{% block date_widget_attributes %}
    {% import 'UndfFormBundle:Form:angular_fields_macros.html.twig' as ngMacros %}
    {% set ngModel = ngMacros.ng_model(form, name) %}

{% spaceless %}
    id="{{ id }}" name="{{ full_name }}"{% if read_only %} readonly="readonly"{% endif %}{% if disabled %} disabled="disabled"{% endif %}{% if required %} required="required"{% endif %}{% if max_length %} maxlength="{{ max_length }}"{% endif %}{% if pattern %} pattern="{{ pattern }}"{% endif %}
    ng-model="date" data-formatted-date="{{ ngModel }}"
    {% for attrname, attrvalue in attr %}{% if attrname in ['placeholder', 'title'] %}{{ attrname }}="{{ attrvalue|trans({}, translation_domain) }}" {% else %}{{ attrname }}="{{ attrvalue }}" {% endif %}{% endfor %}
{% endspaceless %}
{% endblock date_widget_attributes %}


{% block widget_form_group_end %}
{% spaceless %}
{{ form_errors(form) }}
{% if widget_form_group|default(false) or form.parent == null %}
    </div>
{% endif %}
{% endspaceless %}
{% endblock widget_form_group_end %}

{#
    Overwrites widget addon in order to import the macro "icon" in UndfFormBundle
    which uses icons in the fontawesome4 style
#}
{% block widget_addon %}
    {% spaceless %}
        {% from 'UndfFormBundle::icons.html.twig' import icon %}
        {% set widget_addon_icon = widget_addon.icon is defined ? widget_addon.icon : null %}
        <span class="input-group-addon">{{ (widget_addon.text|default(false) ? widget_addon.text|trans({}, translation_domain) : icon(widget_addon_icon))|raw }}</span>
    {% endspaceless %}
{% endblock widget_addon %}

{% block checkbox_widget %}
{% import 'UndfFormBundle:Form:angular_fields_macros.html.twig' as ngMacros %}
{% set ngModel = ngMacros.ng_model(form, name) %}
{% spaceless %}
    {% if label is not sameas(false) and label is empty %}
        {% set label = name|humanize %}
    {% endif %}

    <input data-ng-false-value data-ng-model="{{ ngModel }}" data-ng-init="{{ ngModel }}={{ data?'true':'false' }}" type="checkbox" {{ block('widget_attributes') }}{% if checked %} checked="checked"{% endif %}/>
    {% if form.parent != null and 'choice' not in form.parent.vars.block_prefixes and label_render %}
        <label class="checkbox inline control-label" for="{{ id }}">
    {% endif %}
                <span><i class="ml-icon-1"></i></span>
    {% if form.parent != null and 'choice' not in form.parent.vars.block_prefixes %}
        {% if label_render and widget_checkbox_label in ['both', 'widget'] %}
            {{ label|trans({}, translation_domain) | raw }}
        </label>
        {% endif %}
    {% endif %}
{% endspaceless %}
{% endblock checkbox_widget %}
