{% extends 'MopaBootstrapBundle:Form:fields.html.twig'%}

{% block widget_attributes %}

{% set ngModel = '' %}
{% if form.parent.parent %}
    {% if form.parent.parent.parent %}
        {% set ngModel = ngModel ~ form.parent.parent.parent.vars.name ~ '.' %}
    {% endif %}
        {% set ngModel = ngModel ~ form.parent.parent.vars.name ~ '.' %}
{% endif %}
{% set ngModel = ngModel ~ form.parent.vars.name ~ '.' ~ name %}

{% spaceless %}
    id="{{ id }}" name="{{ full_name }}"{% if read_only %} readonly="readonly"{% endif %}{% if disabled %} disabled="disabled"{% endif %}{% if required %} required="required"{% endif %}{% if max_length %} maxlength="{{ max_length }}"{% endif %}{% if pattern %} pattern="{{ pattern }}"{% endif %}
    ng-model="{{ ngModel }}" {% if value is not empty %}ng-init='{{ ngModel }} = "{{ value }}"'{% endif %}
    {% for attrname, attrvalue in attr %}{% if attrname in ['placeholder', 'title'] %}{{ attrname }}="{{ attrvalue|trans({}, translation_domain) }}" {% else %}{{ attrname }}="{{ attrvalue }}" {% endif %}{% endfor %}
{% endspaceless %}
{% endblock widget_attributes %}

{% block label_asterisk %}
{% if required %}
    <span>*</span>
{% endif %}
{% endblock label_asterisk %}

{% block form_errors %}

{% set ngModel = '' %}
{% set rootName = form.vars.name %}
{% if form.parent %}
    {% set rootName = form.parent.vars.name %}
    {% set ngModel = ngModel ~ form.vars.name ~ '.' %}
    {% if form.parent.parent %}
        {% set rootName = form.parent.parent.vars.name %}
        {% if form.parent.parent.parent %}
            {% set rootName = form.parent.parent.parent.vars.name %}
            {% set ngModel = ngModel ~ form.parent.parent.parent.vars.name ~ '.' %}
        {% endif %}
        {% set ngModel = ngModel ~ form.parent.parent.vars.name ~ '.' %}
    {% endif %}
{% endif %}
{% set ngModel = ngModel ~ form.vars.name ~ '.' ~ name %}

{% spaceless %}
    {% if form.children|length == 0 %}
        <span class="help-block" ng-show="{{ rootName ~ '.validated && ' ~ rootName ~ '["' ~ full_name ~ '"].$invalid' }}">
           {{ attr.invalid_message|default('form.required')|trans(attr.invalid_parameters|default({}), translation_domain) }}
        </span>
    {% endif %}
    {% if errors|length > 0 %}
    {% set childForm = form.parent ? rootName ~ '["' ~ full_name ~ '"]' : rootName %}
    <span class="help-{{ block('error_type') }}" ng-show="{{ childForm ~ '.$pristine' }}">
        {% if error_delay %}
            {% for child in form %}
                {% if loop.index == 1 %}
                    {% if child.set('errors', errors) %}{% endif %}
                {% endif %}
            {% endfor %}
        {% else %}
            {# prevent deep nesting wrong context copy error #}
            {% from 'MopaBootstrapBundle::flash.html.twig' import flash %}
            {% for error in errors %}
                {{
                    flash(
                        'error',
                        error.messagePluralization is null
                            ? error.messageTemplate|trans(error.messageParameters, 'validators')
                            : error.messageTemplate|transchoice(error.messagePluralization, error.messageParameters, 'validators')
                    )
                }}
            {% endfor %}
        {% endif %}
    </span>
    {% endif %}
{% endspaceless %}
{% endblock form_errors %}

{% block widget_form_group_start %}

{% set ngModel = '' %}
{% set rootName = form.vars.name %}
{% if form.parent %}
    {% set rootName = form.parent.vars.name %}
    {% set ngModel = ngModel ~ form.vars.name ~ '.' %}
    {% if form.parent.parent %}
        {% set rootName = form.parent.parent.vars.name %}
        {% if form.parent.parent.parent %}
            {% set rootName = form.parent.parent.parent.vars.name %}
            {% set ngModel = ngModel ~ form.parent.parent.parent.vars.name ~ '.' %}
        {% endif %}
        {% set ngModel = ngModel ~ form.parent.parent.vars.name ~ '.' %}
    {% endif %}
{% endif %}
{% set ngModel = ngModel ~ form.vars.name ~ '.' ~ name %}

{% spaceless %}
{% if widget_form_group|default(false) or form.parent == null %}
    {% if prototype is defined %}
        {% set data_prototype = 'collection' in form.vars.block_prefixes and not omit_collection_item ? '<div class="collection-item ' ~ widget_items_attr.class|default()|join(' ') ~ '" id="' ~ prototype.vars.id ~ '_control_group">' ~ form_row(prototype) ~ '</div>' : form_row(prototype) %}
        {% set data_prototype_name = form.vars.form.vars.prototype.vars.name|default('__name__') %}
        {% set widget_form_group_attr = widget_form_group_attr|merge({'data-prototype': data_prototype, 'data-prototype-name': data_prototype_name})|merge(attr) %}
    {% endif %}
    {% set widget_form_group_attr = widget_form_group_attr|merge({'id': id ~ '_control_group', 'class': widget_form_group_attr.class|default('') ~ ' form-group '}) %}
    {% if errors|length > 0 %}
        {% set widget_form_group_attr = widget_form_group_attr|merge({'class': widget_form_group_attr.class|default('') ~ ' has-error'}) %}
    {% endif %}
    {% set widget_form_group_attr = widget_form_group_attr|merge({'class': widget_form_group_attr.class|default('') ~ ' ng-class: {"has-error":' ~ rootName ~ '["' ~ full_name ~ '"].$invalid && (' ~ rootName ~ '["' ~ full_name ~ '"].$dirty || ' ~ rootName ~ '.validated)}'}) %}
    {% if 'collection' in form.vars.block_prefixes and attr.class is defined %}
      {% set widget_form_group_attr = widget_form_group_attr|merge({'class': widget_form_group_attr.class|default('') ~ ' ' ~ attr.class}) %}
    {% endif %}
    <div {% for attrname,attrvalue in widget_form_group_attr %} {{attrname}}="{{attrvalue}}"{% endfor %}>
    {# a form item containing the field in block_prefixes is a near subform or a field directly #}
    {% if (form|length > 0 and form.parent != null)
        and 'field' not in form.vars.block_prefixes %}
        {% if show_child_legend%}
            {{ block('form_legend') }}
        {% elseif label_render %}
            {{ form_label(form, label|default(null)) }}
        {% endif %}
    {% else %}
        {% if label_render %}
            {{ form_label(form, label|default(null)) }}
        {% endif %}
    {% endif %}
{% else %}
    {% if label_render %}
        {{ form_label(form, label|default(null)) }}
    {% endif %}
{% endif %}

{% if horizontal and not label_render %}
    <label class="{{ horizontal_label_class }} control-label"></label>
{% endif %}

{% if horizontal %}
    <div class="{{ horizontal_input_wrapper_class }}">
{% endif %}
{% endspaceless %}
{% endblock widget_form_group_start %}

{% block password_widget %}
{% spaceless %}
    {% set type = type|default('password') %}
    {{ block('form_widget_simple') }}
{% endspaceless %}
{% endblock password_widget %}

{% block date_widget %}
{#
This block add some dirty hacks to the date_widget block from the MopaBootstrapBundle
because the original block doesnÂ´t work properly with bootstrap 3
TODO: Check the original project and once there is a stable version for bootstrap 3
get rid of this block and use the one from 'MopaBootstrapBundle:Form:fields.html.twig'
#}
{% spaceless %}
{% if widget == 'single_text' %}
    {% if datepicker is defined %}
        <div class="input-{{ widget_addon.type }} date dropdown dropup" style="position:relative" {{ block('widget_container_attributes') }} data-date="{{ value }}" data-date-format="{{ format|lower }}" data-form="datepicker">
            {% if widget_addon.type == 'prepend' %}
                {{ block('widget_addon') }}
            {% endif %}
            {% set attr = attr|merge({'class': attr.class|default('') ~ ' not-removable grd-white'}) %}
            <input type="text" {{ block('widget_attributes') }} value="{{ value }}" data-form="datepicker" data-date-format="{{ format|lower }}"/>
            <button class="btn dropdown-toggle" ng-click="opened=!opened"><i class="icon-calendar"></i></button>
            <div class="dropdown-menu" {% if value is not empty %}ng-init="date = '{{ value }}'"{% endif %}>
                <input type="text" u-datepicker show-weeks="false" {{ block('date_widget_attributes') }} value="{{ value }}" data-form="datepicker" data-date-format="{{ format|lower }}"/>
            </div>
            {% if widget_addon.type == 'append' %}
                {{ block('widget_addon') }}
            {% endif %}
        </div>
    {% else %}
        {{ block('form_widget_simple') }}
    {% endif %}
{% else %}
        {% set attr = attr|merge({'class': attr.class|default('inline')}) %}
            {{ date_pattern|replace({
                '{{ year }}':  form_widget(form.year, {'attr': {'class': attr.widget_class|default('') ~ ' input-small'}}),
                '{{ month }}': form_widget(form.month, {'attr': {'class': attr.widget_class|default('') ~ ' input-mini'}}),
                '{{ day }}':   form_widget(form.day, {'attr': {'class': attr.widget_class|default('') ~ ' input-mini'}}),
            })|raw }}
        {{ block('help') }}
{% endif %}
{% endspaceless %}
{% endblock date_widget %}

{% block date_widget_attributes %}

{% set ngModel = '' %}
{% if form.parent.parent %}
    {% if form.parent.parent.parent %}
        {% set ngModel = ngModel ~ form.parent.parent.parent.vars.name ~ '.' %}
    {% endif %}
        {% set ngModel = ngModel ~ form.parent.parent.vars.name ~ '.' %}
{% endif %}
{% set ngModel = ngModel ~ form.parent.vars.name ~ '.' ~ name %}

{% spaceless %}
    id="{{ id }}" name="{{ full_name }}"{% if read_only %} readonly="readonly"{% endif %}{% if disabled %} disabled="disabled"{% endif %}{% if required %} required="required"{% endif %}{% if max_length %} maxlength="{{ max_length }}"{% endif %}{% if pattern %} pattern="{{ pattern }}"{% endif %}
    ng-model="date" data-formatted-date="{{ ngModel }}"
    {% for attrname, attrvalue in attr %}{% if attrname in ['placeholder', 'title'] %}{{ attrname }}="{{ attrvalue|trans({}, translation_domain) }}" {% else %}{{ attrname }}="{{ attrvalue }}" {% endif %}{% endfor %}
{% endspaceless %}
{% endblock date_widget_attributes %}
